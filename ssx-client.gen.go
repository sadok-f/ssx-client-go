// Package ssxclientgo provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package ssxclientgo

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for DeploymentCreateResponseCloudProviderId.
const (
	Aws   DeploymentCreateResponseCloudProviderId = "aws"
	Azure DeploymentCreateResponseCloudProviderId = "azure"
	Gcp   DeploymentCreateResponseCloudProviderId = "gcp"
)

// AuthTokenResponse defines model for AuthTokenResponse.
type AuthTokenResponse struct {
	Token *string `json:"token,omitempty"`
}

// DeploymentCreateRequest defines model for DeploymentCreateRequest.
type DeploymentCreateRequest struct {
	Application           string  `json:"application"`
	ApplicationVersion    string  `json:"application_version"`
	CloudProviderId       string  `json:"cloud_provider_id"`
	Name                  string  `json:"name"`
	NumAdditionalAppNodes *int32  `json:"num_additional_app_nodes,omitempty"`
	Plan                  string  `json:"plan"`
	PlanType              string  `json:"plan_type"`
	PrivateVpc            *string `json:"private_vpc,omitempty"`
	RegionId              string  `json:"region_id"`
	TerminationLock       bool    `json:"termination_lock"`
}

// DeploymentCreateResponse defines model for DeploymentCreateResponse.
type DeploymentCreateResponse struct {
	Application           string                                  `json:"application"`
	ApplicationVersion    string                                  `json:"application_version"`
	CloudProviderId       DeploymentCreateResponseCloudProviderId `json:"cloud_provider_id"`
	Name                  string                                  `json:"name"`
	NumAdditionalAppNodes *int32                                  `json:"num_additional_app_nodes,omitempty"`
	Plan                  string                                  `json:"plan"`
	PlanType              string                                  `json:"plan_type"`
	PrivateVpc            *int32                                  `json:"private_vpc,omitempty"`
	RegionId              string                                  `json:"region_id"`
	TerminationLock       bool                                    `json:"termination_lock"`
}

// DeploymentCreateResponseCloudProviderId defines model for DeploymentCreateResponse.CloudProviderId.
type DeploymentCreateResponseCloudProviderId string

// DeploymentDeleteResponse defines model for DeploymentDeleteResponse.
type DeploymentDeleteResponse struct {
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// DeploymentListResponse defines model for DeploymentListResponse.
type DeploymentListResponse struct {
	Count    *int32  `json:"count,omitempty"`
	Next     *string `json:"next,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Results  *[]struct {
		Application                 *string             `json:"application,omitempty"`
		ApplicationNodesCount       *int32              `json:"application_nodes_count,omitempty"`
		ApplicationVersion          *string             `json:"application_version,omitempty"`
		Backup                      *string             `json:"backup,omitempty"`
		BackupsEnabled              *bool               `json:"backups_enabled,omitempty"`
		CloudProvider               *string             `json:"cloud_provider,omitempty"`
		CloudProviderId             *string             `json:"cloud_provider_id,omitempty"`
		DateCreated                 *openapi_types.Date `json:"date_created,omitempty"`
		DeploymentType              *string             `json:"deployment_type,omitempty"`
		DesiredTier                 *string             `json:"desired_tier,omitempty"`
		Dr                          *string             `json:"dr,omitempty"`
		DrEnabled                   *bool               `json:"dr_enabled,omitempty"`
		DrPlanType                  *string             `json:"dr_plan_type,omitempty"`
		HttpEndpoint                *string             `json:"http_endpoint,omitempty"`
		IsMasterSlave               *bool               `json:"is_master_slave,omitempty"`
		Name                        *string             `json:"name,omitempty"`
		NumAdditionalAppNodes       *int32              `json:"num_additional_app_nodes,omitempty"`
		NumAdditionalZookeeperNodes *int32              `json:"num_additional_zookeeper_nodes,omitempty"`
		NumNodesDefault             *int32              `json:"num_nodes_default,omitempty"`
		NumZookeeperNodesDefault    *int32              `json:"num_zookeeper_nodes_default,omitempty"`
		Onboarding                  *bool               `json:"onboarding,omitempty"`
		PaymentMethod               *string             `json:"payment_method,omitempty"`
		Plan                        *string             `json:"plan,omitempty"`
		PlanType                    *string             `json:"plan_type,omitempty"`
		ProvisionState              *string             `json:"provision_state,omitempty"`
		PurchaseOrder               *string             `json:"purchase_order,omitempty"`
		RegionId                    *string             `json:"region_id,omitempty"`
		Savings                     *string             `json:"savings,omitempty"`
		SecurityPack                *bool               `json:"security_pack,omitempty"`
		SelectedNodeCount           *int32              `json:"selected_node_count,omitempty"`
		SelectedPlanMemory          *int32              `json:"selected_plan_memory,omitempty"`
		SelectedPlanStorage         *int32              `json:"selected_plan_storage,omitempty"`
		Servers                     *string             `json:"servers,omitempty"`
		SlaActive                   *bool               `json:"sla_active,omitempty"`
		Specifications              *string             `json:"specifications,omitempty"`
		StateChanged                *string             `json:"state_changed,omitempty"`
		Status                      *string             `json:"status,omitempty"`
		Subscription                *string             `json:"subscription,omitempty"`
		Tag                         *string             `json:"tag,omitempty"`
		TermEnd                     *string             `json:"term_end,omitempty"`
		TerminationLock             *bool               `json:"termination_lock,omitempty"`
		Tier                        *string             `json:"tier,omitempty"`
		Uid                         *string             `json:"uid,omitempty"`
		VpcName                     *string             `json:"vpc_name,omitempty"`
		VpcType                     *string             `json:"vpc_type,omitempty"`
		ZookeeperEnsemble           *string             `json:"zookeeper_ensemble,omitempty"`
	} `json:"results,omitempty"`
}

// AuthorizationToken defines model for Authorization-token.
type AuthorizationToken = string

// GenerateNewTokenParams defines parameters for GenerateNewToken.
type GenerateNewTokenParams struct {
	// Username This is the email address used when you log into the SearchStax server.
	Username string `form:"username" json:"username"`

	// Password This is the password associated with that username.
	Password string `form:"password" json:"password"`

	// TfaToken This is a six-digit code supplied by the Google Authenticator to enable two-factor authentication. Each code is good for one minute, so move fast. <br> The eight-character backup codes work with no time limit, but only once each.<br> If TFA is not enabled for this user account, this token is ignored.
	TfaToken *string `form:"tfa_token,omitempty" json:"tfa_token,omitempty"`
}

// GetDeploymentsListParams defines parameters for GetDeploymentsList.
type GetDeploymentsListParams struct {
	// AuthorizationToken The token returned from the authorization endpoint. Use this token in each request.
	AuthorizationToken AuthorizationToken `json:"Authorization: Token"`
}

// CreateNewDeploymentParams defines parameters for CreateNewDeployment.
type CreateNewDeploymentParams struct {
	// AuthorizationToken The token returned from the authorization endpoint. Use this token in each request.
	AuthorizationToken AuthorizationToken `json:"Authorization: Token"`
}

// DeleteDeploymentParams defines parameters for DeleteDeployment.
type DeleteDeploymentParams struct {
	// AuthorizationToken The token returned from the authorization endpoint. Use this token in each request.
	AuthorizationToken AuthorizationToken `json:"Authorization: Token"`
}

// CreateNewDeploymentJSONRequestBody defines body for CreateNewDeployment for application/json ContentType.
type CreateNewDeploymentJSONRequestBody = DeploymentCreateRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GenerateNewToken request
	GenerateNewToken(ctx context.Context, params *GenerateNewTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploymentsList request
	GetDeploymentsList(ctx context.Context, accountName string, params *GetDeploymentsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNewDeployment request with any body
	CreateNewDeploymentWithBody(ctx context.Context, accountName string, params *CreateNewDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNewDeployment(ctx context.Context, accountName string, params *CreateNewDeploymentParams, body CreateNewDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDeployment request
	DeleteDeployment(ctx context.Context, accountName string, uid string, params *DeleteDeploymentParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GenerateNewToken(ctx context.Context, params *GenerateNewTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateNewTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploymentsList(ctx context.Context, accountName string, params *GetDeploymentsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentsListRequest(c.Server, accountName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNewDeploymentWithBody(ctx context.Context, accountName string, params *CreateNewDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewDeploymentRequestWithBody(c.Server, accountName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNewDeployment(ctx context.Context, accountName string, params *CreateNewDeploymentParams, body CreateNewDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewDeploymentRequest(c.Server, accountName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDeployment(ctx context.Context, accountName string, uid string, params *DeleteDeploymentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeploymentRequest(c.Server, accountName, uid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGenerateNewTokenRequest generates requests for GenerateNewToken
func NewGenerateNewTokenRequest(server string, params *GenerateNewTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/obtain-auth-token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, params.Password); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TfaToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tfa_token", runtime.ParamLocationQuery, *params.TfaToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentsListRequest generates requests for GetDeploymentsList
func NewGetDeploymentsListRequest(server string, accountName string, params *GetDeploymentsListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", true, "account_name", runtime.ParamLocationPath, accountName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/deployment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization: Token", runtime.ParamLocationHeader, params.AuthorizationToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization: Token", headerParam0)

	return req, nil
}

// NewCreateNewDeploymentRequest calls the generic CreateNewDeployment builder with application/json body
func NewCreateNewDeploymentRequest(server string, accountName string, params *CreateNewDeploymentParams, body CreateNewDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNewDeploymentRequestWithBody(server, accountName, params, "application/json", bodyReader)
}

// NewCreateNewDeploymentRequestWithBody generates requests for CreateNewDeployment with any type of body
func NewCreateNewDeploymentRequestWithBody(server string, accountName string, params *CreateNewDeploymentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", true, "account_name", runtime.ParamLocationPath, accountName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/deployment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization: Token", runtime.ParamLocationHeader, params.AuthorizationToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization: Token", headerParam0)

	return req, nil
}

// NewDeleteDeploymentRequest generates requests for DeleteDeployment
func NewDeleteDeploymentRequest(server string, accountName string, uid string, params *DeleteDeploymentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", true, "account_name", runtime.ParamLocationPath, accountName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", true, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/deployment/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization: Token", runtime.ParamLocationHeader, params.AuthorizationToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization: Token", headerParam0)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GenerateNewToken request
	GenerateNewTokenWithResponse(ctx context.Context, params *GenerateNewTokenParams, reqEditors ...RequestEditorFn) (*GenerateNewTokenResponse, error)

	// GetDeploymentsList request
	GetDeploymentsListWithResponse(ctx context.Context, accountName string, params *GetDeploymentsListParams, reqEditors ...RequestEditorFn) (*GetDeploymentsListResponse, error)

	// CreateNewDeployment request with any body
	CreateNewDeploymentWithBodyWithResponse(ctx context.Context, accountName string, params *CreateNewDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNewDeploymentResponse, error)

	CreateNewDeploymentWithResponse(ctx context.Context, accountName string, params *CreateNewDeploymentParams, body CreateNewDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNewDeploymentResponse, error)

	// DeleteDeployment request
	DeleteDeploymentWithResponse(ctx context.Context, accountName string, uid string, params *DeleteDeploymentParams, reqEditors ...RequestEditorFn) (*DeleteDeploymentResponse, error)
}

type GenerateNewTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GenerateNewTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateNewTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeploymentListResponse
}

// Status returns HTTPResponse.Status
func (r GetDeploymentsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNewDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentCreateResponse
}

// Status returns HTTPResponse.Status
func (r CreateNewDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNewDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeploymentDeleteResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GenerateNewTokenWithResponse request returning *GenerateNewTokenResponse
func (c *ClientWithResponses) GenerateNewTokenWithResponse(ctx context.Context, params *GenerateNewTokenParams, reqEditors ...RequestEditorFn) (*GenerateNewTokenResponse, error) {
	rsp, err := c.GenerateNewToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateNewTokenResponse(rsp)
}

// GetDeploymentsListWithResponse request returning *GetDeploymentsListResponse
func (c *ClientWithResponses) GetDeploymentsListWithResponse(ctx context.Context, accountName string, params *GetDeploymentsListParams, reqEditors ...RequestEditorFn) (*GetDeploymentsListResponse, error) {
	rsp, err := c.GetDeploymentsList(ctx, accountName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentsListResponse(rsp)
}

// CreateNewDeploymentWithBodyWithResponse request with arbitrary body returning *CreateNewDeploymentResponse
func (c *ClientWithResponses) CreateNewDeploymentWithBodyWithResponse(ctx context.Context, accountName string, params *CreateNewDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNewDeploymentResponse, error) {
	rsp, err := c.CreateNewDeploymentWithBody(ctx, accountName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewDeploymentResponse(rsp)
}

func (c *ClientWithResponses) CreateNewDeploymentWithResponse(ctx context.Context, accountName string, params *CreateNewDeploymentParams, body CreateNewDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNewDeploymentResponse, error) {
	rsp, err := c.CreateNewDeployment(ctx, accountName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewDeploymentResponse(rsp)
}

// DeleteDeploymentWithResponse request returning *DeleteDeploymentResponse
func (c *ClientWithResponses) DeleteDeploymentWithResponse(ctx context.Context, accountName string, uid string, params *DeleteDeploymentParams, reqEditors ...RequestEditorFn) (*DeleteDeploymentResponse, error) {
	rsp, err := c.DeleteDeployment(ctx, accountName, uid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeploymentResponse(rsp)
}

// ParseGenerateNewTokenResponse parses an HTTP response from a GenerateNewTokenWithResponse call
func ParseGenerateNewTokenResponse(rsp *http.Response) (*GenerateNewTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateNewTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDeploymentsListResponse parses an HTTP response from a GetDeploymentsListWithResponse call
func ParseGetDeploymentsListResponse(rsp *http.Response) (*GetDeploymentsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeploymentListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateNewDeploymentResponse parses an HTTP response from a CreateNewDeploymentWithResponse call
func ParseCreateNewDeploymentResponse(rsp *http.Response) (*CreateNewDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNewDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDeploymentResponse parses an HTTP response from a DeleteDeploymentWithResponse call
func ParseDeleteDeploymentResponse(rsp *http.Response) (*DeleteDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeploymentDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
